{"name":"Universal-mixin","tagline":"A mixin usable for both generic objects and decorators.","body":"universal-mixin [![build status](https://secure.travis-ci.org/WebReflection/universal-mixin.svg)](http://travis-ci.org/WebReflection/universal-mixin)\r\n===================================\r\n\r\nInspired by [Reginald Braithwaite](https://twitter.com/raganwald) proposal in his [Using ES.later Decorators as Mixins](http://raganwald.com/2015/06/26/decorators-in-es7.html) post, and discussed with both Reginald and [Addy Osmani](https://twitter.com/addyosmani) in [the gist](https://gist.github.com/addyosmani/a0ccf60eae4d8e5290a0#gistcomment-1489585) related to Addy's [Exploring ES2016 Decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841) post, this `mixin` function goal is to bring a universal way, from _ES3_ to _ES.future_, client or server, to define functions usable as decorators for both clases and generic objects. \r\n\r\nFollowing the same ES7 example used in Addy's post, based on this `mixin` solution.\r\n```js\r\nconst SuperPowers = mixin({\r\n  init() {\r\n    Object.defineProperty(this, '_superPowers', {value: []});\r\n  },\r\n  addPower(name) {\r\n    this._superPowers.push(name);\r\n    return this;\r\n  },\r\n  get powers() {\r\n    return this._superPowers.slice(0);\r\n  }\r\n});\r\n\r\nconst UtilityBelt = mixin({\r\n  init() {\r\n    Object.defineProperty(this, '_utilityBelt', {value: []});\r\n  },\r\n  addToBelt(name) {\r\n    this._utilityBelt.push(name);\r\n    return this;\r\n  },\r\n  get utilities() {\r\n    return this._utilityBelt.slice(0);\r\n  }\r\n});\r\n\r\n// Usable as decorators\r\n@SuperPowers\r\n@UtilityBelt\r\nclass ComicBookCharacter {\r\n  constructor(first, last) {\r\n    this.firstName = first;\r\n    this.lastName = last;\r\n    // initialize mixins\r\n    // if or when it's necessary\r\n    this.init();\r\n  }\r\n  realName() {\r\n    return this.firstName + ' ' + this.lastName;\r\n  } \r\n};\r\n\r\n// Usage examples\r\nconst batman = new ComicBookCharacter('Bruce', 'Wayne');\r\nconsole.log(batman.realName());\r\n\r\nbatman\r\n  .addToBelt('batarang')\r\n  .addToBelt('cape');\r\n\r\nconsole.log(batman.utilities);\r\n\r\nbatman\r\n  .addPower('detective')\r\n  .addPower('voice sounds like Gollum has asthma');\r\n\r\nconsole.log(batman.powers);\r\n```\r\n\r\nIt is also possible to use the `mixin` with other objects too.\r\n```js\r\n// as example only, don't use at home\r\nvar SimpleEmitter = mixin({\r\n  init: function () {\r\n    Object.defineProperty(\r\n      this,\r\n      '_emitter',\r\n      {value: Object.create(null)}\r\n    );\r\n  },\r\n  on: function (type, handler) {\r\n    (this._emitter[type] || (\r\n      this._emitter[type] = []\r\n    )).push(handler);\r\n  },\r\n  emit: function (type) {\r\n    var args = [].slice.call(arguments, 1);\r\n    (this._emitter[type] || []).forEach(function (fn) {\r\n      fn.apply(this, args);\r\n    }, this);\r\n  }\r\n});\r\n\r\n\r\nvar obj = SimpleEmitter({});\r\n\r\nobj.init();\r\nobj.on('event', function (err, res) {\r\n  console.log(err, res);\r\n});\r\nobj.emit('event', null, 123);\r\n\r\n```\r\n\r\nIt is also possible to define mixin constants, propeties, or static methods, passing a second object as parameter.\r\n\r\n```js\r\nvar WithStatic = mixin({}, {\r\n  VALUE: 'any',\r\n  method: function () {\r\n    return WithStatic.VALUE;\r\n  }\r\n});\r\n\r\nWithStatic.method(); // any\r\n```\r\n\r\n### Which file ?\r\nIn nodejs you can either `npm install universal-mixin` or use [universal-mixin.node.js](build/universal-mixin.node.js) file.\r\n\r\nFor browsers you can use [universal-mixin.js](build/universal-mixin.js) file, and for AMD you can use [universal-mixin.amd.js](build/universal-mixin.amd.js).\r\n\r\n\r\n\r\n### Compatibility\r\n\r\nThe provided functionality is compatible with IE6 or greater, Espruino, NodeJS, and other common JavaScript engines.\r\n\r\nIn pre ES5 copmatible engines properties will be set enumerable and if no ES5 shim+sham is provided upfront getters and setters might not be accepted.\r\n\r\nWhile IE6 and IE7 works just fine, if you are targeting IE8 please be sure ES5 shim+sham is loaded upfront.\r\nYou can put this on top of your page.\r\n```html\r\n<!--[if IE 8]>\r\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/es5-shim/4.1.7/es5-shim.min.js\"></script>\r\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/es5-shim/4.1.7/es5-sham.min.js\"></script>\r\n<![endif]-->\r\n```\r\n\r\nFinally, you can test your browser through the [test page](http://webreflection.github.io/universal-mixin/test/).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}